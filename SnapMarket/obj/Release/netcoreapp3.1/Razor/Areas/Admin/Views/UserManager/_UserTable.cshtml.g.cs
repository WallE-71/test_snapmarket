#pragma checksum "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2a0bc6b1610148a746ac99f49c283d074417f493"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_UserManager__UserTable), @"mvc.1.0.view", @"/Areas/Admin/Views/UserManager/_UserTable.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
using SnapMarket.Services.Contracts;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2a0bc6b1610148a746ac99f49c283d074417f493", @"/Areas/Admin/Views/UserManager/_UserTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d427e38f5e5e1d1d9a2e3ef7c542ced3d59541da", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    public class Areas_Admin_Views_UserManager__UserTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<div id=\"toolbar\">\r\n    <button type=\"button\" class=\"btn btn-success\" data-toggle=\"ajax-modal\" data-url=\"");
#nullable restore
#line 5 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
                                                                                Write(Url.Action("RenderUser","UserManager"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""">
        <i class=""fa fa-plus""></i> | افزودن کاربر جدید
    </button>

    <button type=""button"" id=""remove"" class=""btn btn-danger"" onclick=""DeleteGroup('UserManager', getIdSelections())"" disabled>
        <i class=""fa fa-trash""></i> | حذف گروهی
    </button>
</div>

<table id=""table""
       data-toolbar=""#toolbar""
       data-search=""true""
       data-show-refresh=""true""
       data-show-toggle=""true""
       data-show-fullscreen=""true""
       data-show-columns=""true""
       data-detail-view=""true""
       data-show-export=""true""
       data-click-to-select=""false""
       data-detail-formatter=""detailFormatter""
       data-minimum-count-columns=""2""
       data-show-pagination-switch=""true""
       data-pagination=""true""
       data-id-field=""id""
       data-page-list=""[10, 25, 50, 100, all]""
       data-show-footer=""true""
       data-side-pagination=""server""
       data-url=""/Admin/UserManager/GetUsers""
       data-response-handler=""responseHandler"">
</table>

<script>
    var ");
            WriteLiteral(@"$table = $('#table');
    var $remove = $('#remove');
    var selections = []

    function get_query_params(p) {
        return {
            extraParam: 'abc',
            search: p.title,
            sort: p.sort,
            order: p.order,
            limit: p.limit,
            offset: p.offset
        }
    }

    function responseHandler(res) {
        $.each(res.rows, function (i, row) {
            row.state = $.inArray(row.id, selections) !== -1
        })
        return res
    }

    function getIdSelections() {
        return $.map($table.bootstrapTable('getSelections'), function (row) {
            return row.Id;
        });
    }  

    function detailFormatter(index, row) {
        var html = []
        $.each(row, function (key, value) {
            if (key != ""state"" && key != ""Id"" && key != ""id"" && key != ""ردیف"" && key != ""cityName"" && key != ""provinceName"" && key != ""image"" && key != ""isActive"" && key != ""password"" && key != ""_rolesId"") {
                if");
            WriteLiteral(@" (key == ""bio"") key = 'معرفی';
                if (key == ""email"") key = 'ایمیل';                 
                if (key == ""credit"") key = 'اعتبار';
                if (key == ""firstName"") key = 'نام';
                if (key == ""genderName"") key = 'جنسیت';
                if (key == ""roleName"") key = 'نقش اصلی';
                if (key == ""userName"") key = 'نام کاربری';
                if (key == ""birthDate"") key = 'تاریخ تولد';
                if (key == ""lastName"") key = 'نام خانوادگی';
                if (key == ""phoneNumber"") key = 'شماره تماس';
                if (key == ""persianInsertTime"") key = 'تاریخ عضویت';

                if (key == ""address"") {
                    key = 'آدرس';
                    if (row.cityName != null && row.provinceName != null)
                        value = ""استان: "" + row.provinceName + "", شهر: "" + row.cityName + "", آدرس: "" + row.address;
                    else
                        value = row.address;
                }
                if (key");
            WriteLiteral(@" == ""_rolesName"") {
                    key = 'نقش ها';
                    value = row._rolesName[row._rolesName.length - 1] +
                        ((row._rolesName[row._rolesName.length - 2] != undefined ? ' - ' + row._rolesName[row._rolesName.length - 2] : '') +
                        (row._rolesName[row._rolesName.length - 3] != undefined ? ' - ' + row._rolesName[row._rolesName.length - 3] : '') +
                        (row._rolesName[row._rolesName.length - 4] != undefined ? ' - ' + row._rolesName[row._rolesName.length - 4] : ''));
                }

                html.push('<p><b>' + key + ':</b> ' + value + '</p>')
            }
        })
        return html.join('')
    }

    function operateFormatter(value, row, index) {
        var access = """";
        if ('");
#nullable restore
#line 104 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
        Write(securityTrimmingService.CanUserAccess(User,"Admin","UserManager","Details"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\' == \'True\') {\r\n            access = access + \'<a class=\"btn btn btn-primary btn-sm\" href=");
#nullable restore
#line 105 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
                                                                     Write(Url.Action("Details","UserManager"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?userId=\' + row.Id + \' title=\"مدیریت\"><i class=\"fa fa-user\"></i> | مدیریت </a>\';\r\n        }\r\n        if (\'");
#nullable restore
#line 107 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
        Write(securityTrimmingService.CanUserAccess(User,"Admin","DynamicAccess","Index"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\' == \'True\') {\r\n            access = access + \'<a class=\"btn btn btn-success mr-1 btn-sm\" href=");
#nullable restore
#line 108 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
                                                                          Write(Url.Action("Index","DynamicAccess"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?userId=\' + row.Id + \'> سطح دسترسی </a>\';\r\n        }\r\n        if (\'");
#nullable restore
#line 110 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
        Write(securityTrimmingService.CanUserAccess(User,"Admin","UserManager","RenderUser"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\' == \'True\') {\r\n            access = access + \'<button type=\"button\" class=\"btn-link text-success\" data-toggle=\"ajax-modal\" data-url=");
#nullable restore
#line 111 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
                                                                                                                Write(Url.Action("RenderUser", "UserManager"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?userId=\' + row.Id + \' title=\"ویرایش\"><i class=\"fa fa-edit\"></i></button >\';\r\n        }\r\n        if (\'");
#nullable restore
#line 113 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
        Write(securityTrimmingService.CanUserAccess(User,"Admin","UserManager","Delete"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\' == \'True\') {\r\n            access = access + \'<button type=\"button\" class=\"btn-link text-danger\" data-toggle=\"ajax-modal\" data-url=");
#nullable restore
#line 114 "C:\Other\Training\Asp.Net Core\SnapMarket\SnapMarket\Areas\Admin\Views\UserManager\_UserTable.cshtml"
                                                                                                               Write(Url.Action("Delete", "UserManager"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/?userId=' + row.Id + ' title=""حذف""><i class=""fa fa-trash""></i></button >';
        }
        return access;
    }

    function isActiveFormatter(value, row, index) {
        var spanClass = ""badge badge-danger"";
        var IsActive = ""غیرفعال"";
        if (!row.IsActive) {
            IsActive = ""فعال"";
            spanClass = ""badge badge-success"";
        }
        return [
            '<span class=""' + spanClass + '"">' + IsActive + '</span>'
        ].join('')
    }

    function totalTextFormatter(data) {
        return 'تعداد'
    }

    function totalNameFormatter(data) {
        return data.length
    }

    function initTable() {
        $table.bootstrapTable('destroy').bootstrapTable({
            height: 600,
            innerWidth: 1000,
            locale: 'fa-IR',
            columns: [
                [{
                    field: 'state',
                    checkbox: true,
                    rowspan: 2,
                    align: 'center',
              ");
            WriteLiteral(@"      valign: 'middle',
                }, {
                    title: 'ردیف',
                    field: 'ردیف',
                    rowspan: 2,
                    align: 'center',
                    valign: 'middle',
                    footerFormatter: totalTextFormatter
                }, {
                    title: 'جزئیات اطلاعات کاربران',
                    colspan: 7,
                    align: 'center'
                }],
                [{
                    field: 'firstName',
                    title: 'نام',
                    sortable: true,
                    align: 'center',
                    footerFormatter: totalNameFormatter
                },{
                    field: 'lastName',
                    title: 'نام خانوادگی',
                    sortable: true,
                    align: 'center'
                },{
                    field: 'email',
                    title: 'ایمیل',
                    sortable: true,
                    align: 'cent");
            WriteLiteral(@"er'
                },{
                    field: 'userName',
                    title: 'نام کاربری',
                    sortable: true,
                    align: 'center'
                },{
                    field: 'persianInsertTime',
                    title: 'تاریخ عضویت',
                    sortable: true,
                    align: 'center'
                },{
                    field: 'isActive',
                    title: 'وضعیت',
                    sortable: true,
                    align: 'center',
                    formatter: isActiveFormatter
                },{
                    field: 'operate',
                    title: 'عملیات',
                    align: 'center',
                    events: window.operateEvents,
                    formatter: operateFormatter
                }]
            ]
        })

        $table.on('check.bs.table uncheck.bs.table ' +
            'check-all.bs.table uncheck-all.bs.table',
            function () {
        ");
            WriteLiteral(@"        $remove.prop('disabled', !$table.bootstrapTable('getSelections').length)
                selections = getIdSelections()
            })
    }

    $(function () {
        initTable()
        $('#locale').change(initTable)
    })
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public ISecurityTrimmingService securityTrimmingService { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
